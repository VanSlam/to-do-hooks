{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Todo","_ref","todo","index","completeTodo","removeTodo","react_default","a","createElement","style","textDecoration","isCompleted","className","text","onClick","TodoForm","_ref2","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","test","memory","JSON","parse","localStorage","getItem","_useState3","_useState4","todos","setTodos","newTodos","toConsumableArray","setItem","stringify","splice","map","key","ß","concat","console","log","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAGA,SAASA,EAATC,GAAyD,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,aAAcC,EAAcJ,EAAdI,WAEzC,OACEC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CAAEC,eAAgBR,EAAKS,YAAc,eAAiB,IAC7DC,UAAU,QAETV,EAAKW,KACNP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMV,EAAaD,KAApC,aACAG,EAAAC,EAAAC,cAAA,UAAQM,QAAS,kBAAMT,EAAWF,KAAlC,YAMR,SAASY,EAATC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EACHC,mBAAS,IADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACtBK,EADsBH,EAAA,GACfI,EADeJ,EAAA,GAS7B,OACEd,EAAAC,EAAAC,cAAA,QAAMiB,SAPa,SAAAC,GACnBA,EAAEC,iBACGJ,IACLN,EAAQM,GACRC,EAAS,OAIPlB,EAAAC,EAAAC,cAAA,SACEoB,KAAK,OACLhB,UAAU,QACVW,MAAOA,EACPM,YAAY,cACZC,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,WAuD1BS,MAjDf,WACE,IAAIC,EAAO,CAAC,CAAEpB,KAAM,iCAChBqB,EAASC,KAAKC,MAAMC,aAAaC,QAAQ,eAC9B,OAAXJ,IACFD,EAAOC,GAJI,IAAAK,EAMapB,mBAASc,GANtBO,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAMNE,EANMD,EAAA,GAMCE,EANDF,EAAA,GAgBPpC,EAAe,SAAAD,GACnB,IAAMwC,EAAQtB,OAAAuB,EAAA,EAAAvB,CAAOoB,GACrBE,EAASxC,GAAOQ,aAAc,EAC9B0B,aAAaQ,QAAQ,aAAcV,KAAKW,UAAUH,IAClDD,EAASC,IAGLtC,EAAa,SAAAF,GACjB,IAAMwC,EAAQtB,OAAAuB,EAAA,EAAAvB,CAAOoB,GACrBE,EAASI,OAAO5C,EAAO,GACvBkC,aAAaQ,QAAQ,aAAcV,KAAKW,UAAUH,IAClDD,EAASC,IAGX,OACErC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACZ6B,EAAMO,IAAI,SAAC9C,EAAMC,GAAP,OACTG,EAAAC,EAAAC,cAACR,EAAD,CACEiD,IAAK9C,EACLA,MAAOA,EACPD,KAAMA,EACNgD,QAAC,EACD9C,aAAcA,EACdC,WAAYA,MAGhBC,EAAAC,EAAAC,cAACO,EAAD,CAAUE,QAnCA,SAAAJ,GACd,IAAM8B,EAAQ,GAAAQ,OAAA9B,OAAAuB,EAAA,EAAAvB,CAAOoB,GAAP,CAAc,CAAE5B,UAC9BwB,aAAaQ,QAAQ,aAAcV,KAAKW,UAAUH,IAClDS,QAAQC,IAAIhB,aAAaC,QAAQ,eAEjCI,EAASC,SC1COW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cb9f0598.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport './App.css'\n\nfunction Todo({ todo, index, completeTodo, removeTodo }) {\n  //ternary, strikes through text when completed. if complete line through, else do nothing\n  return (\n    <div\n      style={{ textDecoration: todo.isCompleted ? 'line-through' : '' }}\n      className=\"todo\"\n    >\n      {todo.text}\n      <div>\n        <button onClick={() => completeTodo(index)}>Completed</button>\n        <button onClick={() => removeTodo(index)}>Delete</button>\n      </div>\n    </div>\n  )\n}\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState('')\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    if (!value) return\n    addTodo(value)\n    setValue('')\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        className=\"input\"\n        value={value}\n        placeholder=\"Add task...\"\n        onChange={e => setValue(e.target.value)}\n      />\n    </form>\n  )\n}\n\nfunction App() {\n  var test = [{ text: 'Your tasks will appear here!' }]\n  var memory = JSON.parse(localStorage.getItem('rememberMe'))\n  if (memory !== null) {\n    test = memory\n  }\n  const [todos, setTodos] = useState(test)\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }]\n    localStorage.setItem('rememberMe', JSON.stringify(newTodos))\n    console.log(localStorage.getItem('rememberMe'))\n\n    setTodos(newTodos)\n  }\n\n  const completeTodo = index => {\n    const newTodos = [...todos]\n    newTodos[index].isCompleted = true\n    localStorage.setItem('rememberMe', JSON.stringify(newTodos))\n    setTodos(newTodos)\n  }\n\n  const removeTodo = index => {\n    const newTodos = [...todos]\n    newTodos.splice(index, 1)\n    localStorage.setItem('rememberMe', JSON.stringify(newTodos))\n    setTodos(newTodos)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            ß\n            completeTodo={completeTodo}\n            removeTodo={removeTodo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}